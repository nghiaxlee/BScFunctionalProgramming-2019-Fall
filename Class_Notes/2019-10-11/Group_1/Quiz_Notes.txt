Start= init [1..5] ++ tl (drop 2 [6..10]) 
init [1..5] ++ tl (drop 2 [6..10]) 
init [1,2,3,4,5] ++ tl(drop 2 [6,7,8,9,10])
[1,2,3,4] ++ tl([8,9,10])
[1,2,3,4] ++ [9,10]
[Int] ++ [Int]
[1,2,3,4,9,10]

Start = hd [2..5] ++ take 5 [1..4]
hd [2..5] ++ take 5 [1..4]
hd [Int] ++ take Int [Int]
Int ++ [Int]
hd [[[Bool]]] ++ take [[[Bool]]]
[Int] ++ [Int] ->[Int]

fib2 :: Int Int Int -> Int
fib2 a b 0 = a
fib2 a b c = fib2 b (a+b) (c-1)

Start = fib2 1 1 5
fib2 1 1 5
fib2 1 2 4
fib2 2 3 3
fib2 3 5 2
fib2 5 8 1
fib2 8 13 0

f::Int [Int] Int -> Int
f a _ b = a + (length _) + b
                      ^we don't care variable
Start = f 1 [2] 3

Start = drop ([2,4,6,7]!!1) [3..10] 
drop ([2,4,6,7]!!1) [3..10]
drop (4) [3,4,5,6,7,8,9,10]
[7,8,9,10]